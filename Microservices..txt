Microservices.

Config server : C'est pour externaliser les configurations de chaque microservices. Il est aussi un microservice basé sur Spring boot 3 et spring cloud et il va contenir les configurations de tous les autres microservices.

Eureka server ou discovery server : Il est comme un annuaire ou les microservices vont s'enregistrer et passer leurs informations pour qu'ils puissent etrre accessible via notre API Gateway

Spring cloud gateway : qui est la passerelle principale par laquelle le client va communiquer avec nos microservices.

Voici le flow normal : 

	- Chaque microservice au demarrage va recuperer dabor ses configurations sur le config server externe
	- Quand chaque microservices vont demarrer, ils vont s'enregistrer dans le server de discovery
	- L'api gateway va se connecter sur le serveur eureka pour savoir comment acceder à tous les microservices.
	- L'api gateway va definir des routes pour acceder à chaque microservices communiqué par le client.

On commence un projet toujours par son infrastructure dans notre cas docker compose.

Les microservices par lesquelles ont commence sont le config server et le discrovery service car tout microservice metier auraa au moins besoin de recuperer sa configuration et s'emregistrer quelque part.

Pour le config server:
	- ajouter la dependance config server de spring cloud et ajouter l'annotation @EnableConfigServer dans la classe principale
	- Ajouter les configurations dans l'application properties, definir le port et definir la localisation des configs des microservices de l'architecture
	- Definir le profil actif de l'application sinon problème

POur le discovery service:
	- Il faut ajouter deux dependances le config client : c'est celui qui a besoin de recuperer les configurations et demande à se faire connecter au config server et recuperer les configurations
	- Eureka server: Il est utilise lors qu'on souhaite créer ou considerer l'application spring comme discovery server
	- Mettre l'annotation @EnableEurekaServer
	- Il faut preciser dans l'applciation properties où il va recuperer ses configurations
	- Il faut preciser qu'il ne doit pas s'enregistre au pres de lui meme donc mettre registerWithEureka: false
	- Il faut preciser qu'il ne va pas communiquer ou acceder à d'autres microservices donc on met fetchRegistry: false
	- Il faut preciser son URL de service pour donc on met : 
			serviceUrl:
			defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
