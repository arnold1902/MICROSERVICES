
services:
  postgres:
    # Service de base de données PostgreSQL
    # 'container_name' : nom personnalisé du conteneur pour faciliter la gestion
    container_name: microservice_postgres
    image: postgres
    # Variables d'environnement pour initialiser la base de données
    environment:
      POSTGRES_USER: arnold
      POSTGRES_PASSWORD: arnold_password
      POSTGRES_DB: product
      PGDATA: /var/lib/postgresql/data
    # Volume pour persister les données même si le conteneur est supprimé
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    # Le service est connecté au réseau défini plus bas
    networks:
      - microservice_network
    # Redémarre le conteneur sauf si l'arrêt est manuel
    restart: unless-stopped

  pgadmin:
    # Interface web pour gérer PostgreSQL
    container_name: microservice_pgadmin
    image: dpage/pgadmin4
    # Identifiants pour se connecter à l'interface PGAdmin
    environment:
      PGADMIN_DEFAULT_EMAIL: afotsofone@gmail.com
      PGADMIN_DEFAULT_PASSWORD: arnold_password
    volumes:
      - pgadmin:/var/lib/pgadmin
    # Mapping du port 80 du conteneur vers le port 5050 de la machine hôte
    ports:
      - "5050:80"
    networks:
      - microservice_network
    restart: unless-stopped
    # Astuce : Dans PGAdmin, utiliser comme hostname 'microservice_postgres' pour se connecter à PostgreSQL car ils partagent le même réseau Docker.

  mongo:
    # Service de base de données MongoDB
    container_name: microservice_mongo
    image: mongo
    # Variables d'environnement pour initialiser MongoDB
    environment:
      MONGO_INITDB_ROOT_USERNAME: arnold
      MONGO_INITDB_ROOT_PASSWORD: arnold_password
    volumes:
      - mongo:/data/db
    # Mapping du port 27017 du conteneur vers le port 27017 de la machine hôte
    ports:
      - "27017:27017"
    networks:
      - microservice_network
    restart: unless-stopped
  
  mongo-express:
    # Interface web pour gérer MongoDB
    container_name: microservice_mongo_express
    image: mongo-express
    # Configuration pour se connecter au service MongoDB
    environment:
      # Connexion à Mongo
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: arnold
      ME_CONFIG_MONGODB_ADMINPASSWORD: arnold_password
      # Mapping du port 8081 du conteneur vers le port 8081 de la machine hôte
    ports:
      - "8081:8081"
    networks:
      - microservice_network
    restart: unless-stopped

  mail-dev:
    # Service pour tester l'envoi/réception d'emails en développement
    container_name: microservice_mail_dev
    image: maildev/maildev
    # 1080 : interface web, 1025 : port SMTP pour réception des mails
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - microservice_network
    restart: unless-stopped

  config-server:
    # Service de configuration centralisée (Spring Cloud Config Server)
    container_name: microservice_config_server
    image: docker.io/arnold1902/config-server:0.0.1-SNAPSHOT
    ports:
      - "8888:8888"
    networks:
      - microservice_network
    restart: unless-stopped
  
  discovery-service:
    # Service de configuration centralisée (Spring Cloud Discovery Service)
    container_name: microservice_discovery_service
    image: docker.io/arnold1902/discovery-service:0.0.1-SNAPSHOT
    ports:
      - "8761:8761"
    depends_on:
      - config-server
    networks:
      - microservice_network
    restart: unless-stopped
  
  product:
    # Service de gestion des produits
    container_name: microservice_product_service
    image: docker.io/arnold1902/product:0.0.1-SNAPSHOT
    ports:
      - "8050:8050"
    depends_on:
      - config-server
      - discovery-service
      - postgres
    networks:
      - microservice_network
    restart: unless-stopped
  
  customer:
    # Service de gestion des clients
    container_name: microservice_customer_service
    image: docker.io/arnold1902/customer:0.0.1-SNAPSHOT
    ports:
      - "8090:8090"
    depends_on:
      - config-server
      - discovery-service
      - mongo
    networks:
      - microservice_network
    restart: unless-stopped

  gateway:
    # Service de passerelle (API Gateway)
    container_name: microservice_gateway_service
    image: docker.io/arnold1902/gateway:0.0.1-SNAPSHOT
    ports:
      - "8222:8222"
    depends_on:
      - config-server
      - discovery-service
      - product
      - customer
    networks:
      - microservice_network
    restart: unless-stopped

  prometheus:
    # Service de monitoring Prometheus
    container_name: microservice_prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservice_network
    depends_on:
      - gateway
      - product
      - customer
    restart: unless-stopped

  loki:
    # Service de logging Loki
    container_name: microservice_loki
    image: grafana/loki:3.5
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yml
      - ./loki-wal:/wal
    command: -config.file=/etc/loki/local-config.yml
    networks:
      - microservice_network
    restart: unless-stopped

  
  promtail:
    # Service pour collecter et envoyer les logs à Loki
    container_name: microservice_promtail
    image: grafana/promtail:3.5
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - microservice_network
    depends_on:
      - loki
    restart: unless-stopped

  grafana:
    # Service de visualisation Grafana
    container_name: microservice_grafana
    image: grafana/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin_password
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
      - loki:loki
    depends_on:
      - loki
      - prometheus
    networks:
      - microservice_network
    restart: unless-stopped

  zookeeper:
    container_name: microservice_zookeeper
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    container_name: microservice_kafka
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

networks:
  microservice_network:
  # Réseau Docker pour permettre aux services de communiquer entre eux
    driver: bridge

volumes:
  # Volumes pour persister les données des bases et outils
  postgres:
  pgadmin:
  mongo: